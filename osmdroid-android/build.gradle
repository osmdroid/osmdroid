description = 'An Android library to display OpenStreetMap views.'
apply plugin: 'com.android.library'
apply plugin: "maven-publish"


group = project.property("pom.groupId")
version =  project.property("pom.version")

android {
	namespace 'org.osmdroid.library'

    defaultConfig {
        minSdkVersion findProperty('android.minSdkVersion').toInteger()
        compileSdk findProperty('android.compileSdkVersion').toInteger()
        targetSdkVersion findProperty('android.targetSdkVersion').toInteger()
    }

    testOptions {
       unitTests.returnDefaultValues = true
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    publishing {
        singleVariant("release") {
            withSourcesJar()
            withJavadocJar()
        }
    }

    compileOptions {
        sourceCompatibility(JavaVersion.VERSION_17)
        targetCompatibility(JavaVersion.VERSION_17)
    }
    lint {
        abortOnError false
    }

    gradle.projectsEvaluated {
        preBuild.dependsOn(copyFiles)
    }
}

dependencies {
    testImplementation "org.junit.vintage:junit-vintage-engine:${project.property('junit.version')}"
    testImplementation "org.robolectric:robolectric:${project.property('robolectric.version')}"
    implementation("androidx.annotation:annotation:1.8.1")
    implementation("androidx.lifecycle:lifecycle-common:2.8.4")
    implementation("androidx.lifecycle:lifecycle-extensions:2.2.0")
    implementation 'androidx.appcompat:appcompat:1.7.0'
}

tasks.register('cleanCustomFiles', Delete) {
    delete file('src/main/java/org/osmdroid/OsmdroidBuildInfo.java')
}

import org.apache.tools.ant.filters.*

tasks.register('copyFiles', Copy) {
    from 'src/main/filtered/org/osmdroid'
    into 'src/main/java/org/osmdroid'
    filter(ReplaceTokens, tokens: [
            "pom.version": project.property("pom.version"),
            "date"       : new Date().toString()
    ])
}

afterEvaluate {
    publishing {

        publications {
            release(MavenPublication) {
                from components.release
                groupId project.property("pom.groupId")
                artifactId project.name
                version = project.property("pom.version")
                pom {
                    description =  project.description
                    url = project.property("pom.url")

                    //scm, organization and developers are injected via other mechanisms

                    licenses {
                        license {
                            name=project.property("pom.licenses.license.0.name");
                            url=project.property("pom.licenses.license.0.url");
                            distribution==project.property("pom.licenses.license.0.distribution");
                        }

                    }
                }
            }
        }
    }


}

tasks.register('androidSourcesJar', Jar) {
    from android.sourceSets.main.java.srcDirs
}

artifacts {
//    archives packageReleaseJar
    archives androidSourcesJar

}
clean.dependsOn(copyFiles)
build.dependsOn(copyFiles)
copyFiles.dependsOn(cleanCustomFiles)