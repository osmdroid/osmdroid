description = 'OpenMap in the Play Store, the example app for using osmdroid'

apply plugin: 'com.android.application'
apply from: "https://raw.githubusercontent.com/gradle-fury/gradle-fury/v1.1.4/gradle/android-support.gradle"

// Attention! HACK!
// In https://raw.githubusercontent.com/gradle-fury/gradle-fury/v1.1.4/gradle/android-support.gradle
// we have a hack to prevent builds from failing due to missing signing config. This is done by
// removing the signing task from the build if no keystore/pass is provided.
//
// At some point the signing task has been renamed from "validateReleaseSigning" to
// "validateSigningRelease", thus obviously breaking the build again.
//
// The following is just a copy of the relevant code from android-support.gradle adapted to the new
// name. This should be cleaned up in the future!
afterEvaluate { project ->
    tasks.each { task ->
        if (isAndroidApplication) {
            if ((task.name.toLowerCase().startsWith("assemble") && task.name.toLowerCase().contains('release'))
                    || (task.name.toLowerCase().startsWith("bundle") && task.name.toLowerCase().contains('release'))
                    || (task.name.toLowerCase().startsWith("package") && task.name.toLowerCase().contains('release'))
                    || (task.name.equals("validateSigningRelease"))) {

                task.setEnabled(canSign)
            }
        }
    }
}

android {
    defaultConfig {
        applicationId 'org.osmdroid'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        minSdkVersion Integer.parseInt(project.property('android-minSdkForSupportLib.version'))
    }
    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }
    sourceSets {
        androidTest {
            java.srcDirs = ['../osmdroid-android-it/src/main/java']
        }
    }
}


dependencies {
    compile "com.android.support:support-v4:${project.property('android-support.version')}"
    compile project(':osmdroid-android')
    compile project(':osmdroid-geopackage')
    compile project(':osmdroid-mapsforge')
    compile project(':osmdroid-wms')

    compile 'mil.army.missioncommand:mil-sym-android-renderer:0.1.37'

    compile 'com.github.angads25:filepicker:1.1.1'

    compile "com.android.support:design:${project.property('android-support.version')}" //needed for UI menuing
    compile "com.android.support:cardview-v7:${project.property('android-support.version')}"  //needed for samples only
    compile "com.android.support:recyclerview-v7:${project.property('android-support.version')}" //needed for samples only
    compile "com.android.support:appcompat-v7:${project.property('android-support.version')}" //needed for UI menuing
    //crash logging
    compile 'ch.acra:acra:4.7.0'

    //memory leak testing
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.4'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.4'

    //on device testing
    androidTestCompile 'com.android.support.test:runner:0.4.+'
    androidTestCompile 'com.android.support.test:rules:0.4.+'
    androidTestCompile "com.android.support:support-annotations:${project.property('android-support.version')}"
}


//the following sets the required permissions for API 23+ devices and AVDs

android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExe().toString()
            def mypermission = 'android.permission.ACCESS_FINE_LOCATION'
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice2${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExe().toString()
            def mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE '
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice2${variant.name.capitalize()}"
    }
}
