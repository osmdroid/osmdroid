description = 'OpenMap in the Play Store, the example app for using osmdroid'

apply plugin: 'com.android.application'

android {
    compileSdkVersion = compileSdk
    defaultConfig {
        applicationId 'org.osmdroid'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        minSdkVersion Integer.parseInt(project.property('android-minSdkForSupportLib.version'))
        multiDexEnabled = true
    }
    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }
    sourceSets {
        androidTest {
            java.srcDirs = ['../osmdroid-android-it/src/main/java']
        }
    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation','TypographyQuotes'
        xmlReport false
        htmlReport true
        htmlOutput file("../lint-report-OpenStreetMapViewer.html")
    }
}


dependencies {
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation project(':osmdroid-android')
    implementation project(':osmdroid-geopackage')
    implementation project(':osmdroid-mapsforge')
    implementation project(':osmdroid-wms')
    implementation project(':osmdroid-shape')

    implementation 'mil.army.missioncommand:mil-sym-android-renderer:0.1.37'

    //used for various demos for picking offline tile archives
    implementation 'com.github.angads25:filepicker:1.1.1'

    //used for bookmark demo
    implementation group: 'com.opencsv', name: 'opencsv', version: '4.4'

    //usual android stuff
    implementation "com.google.android.material:material:1.0.0" //needed for UI menuing
    implementation "androidx.cardview:cardview:1.0.0"  //needed for samples only
    implementation "androidx.recyclerview:recyclerview:1.0.0" //needed for samples only
    implementation 'androidx.multidex:multidex:2.0.0'

    implementation "androidx.appcompat:appcompat:1.0.0" //needed for UI menuing
    //crash logging
    implementation 'ch.acra:acra:4.7.0'

    //memory leak testing
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'

    //on device testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.multidex:multidex:2.0.0'
    androidTestImplementation "androidx.annotation:annotation:1.0.0"
}


//the following sets the required permissions for API 23+ devices and AVDs

android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.ACCESS_FINE_LOCATION'
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice2${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExecutable().toString()
            def mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE '
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice2${variant.name.capitalize()}"
    }
}
