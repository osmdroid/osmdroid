description = 'Example application for 3rd party utilities, including the Google wrapper sample, Bing map sources, etc'

apply plugin: 'com.android.application'
apply from: "https://raw.githubusercontent.com/chrisdoyle/gradle-fury/v1.0.18/gradle/android-support.gradle"

android {
    compileSdkVersion 'Google Inc.:Google APIs:23'
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "org.osmdroid.google.sample"
        minSdkVersion 9
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    lintOptions {
        abortOnError false
    }
}


dependencies {
    testCompile "junit:junit:${project.property('junit.version')}"
    compile 'com.android.support:appcompat-v7:23.+'
    //this covers google maps v2 apis
    compile 'com.google.android.gms:play-services:8.+'

    compile 'com.google.android.gms:play-services-maps:8.+'

    compile 'com.android.support:support-v4:23+'
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile project(':osmdroid-android')
    compile project(':osmdroid-third-party')

    androidTestCompile 'com.android.support:support-annotations:23+'
    androidTestCompile 'com.android.support.test:runner:0.4.+'
    androidTestCompile 'com.android.support.test:rules:0.4.+'


}

project.gradle.taskGraph.whenReady {
    //this is just for Travis CI builds, since this package needs at least api 9 with google apis
    //ignore the following build targets 1,2,3,7, 12
    if (System.getenv("ANDROID_TARGET")!=null){
        if ("13".equalsIgnoreCase(System.getenv("ANDROID_TARGET").trim()) ||
                "1".equalsIgnoreCase(System.getenv("ANDROID_TARGET").trim())||
                "2".equalsIgnoreCase(System.getenv("ANDROID_TARGET").trim())||
                "3".equalsIgnoreCase(System.getenv("ANDROID_TARGET").trim())||
                "7".equalsIgnoreCase(System.getenv("ANDROID_TARGET").trim())) {
            println "Skipping GoogleWrapperSample instrumentation test since the API level doesn't match this project"

            installDebug { actions = []; }
            connectedDebugAndroidTest { actions = []; }

        }
    }
}


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExe().toString()
            def mypermission = 'android.permission.ACCESS_FINE_LOCATION'
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice${variant.name.capitalize()}"
    }
}


android.applicationVariants.all { variant ->
    if (variant.getBuildType().name == "debug") {
        task "configDevice2${variant.name.capitalize()}" (type: Exec){
            dependsOn variant.install

            group = 'nameofyourtaskgroup'
            description = 'Describe your task here.'

            def adb = android.getAdbExe().toString()
            def mypermission = 'android.permission.WRITE_EXTERNAL_STORAGE '
            commandLine "$adb shell pm grant ${variant.applicationId} $mypermission".split(' ')
        }
        variant.testVariant.connectedInstrumentTest.dependsOn "configDevice2${variant.name.capitalize()}"
    }
}
